{
    "Iterables": [
        {
            "description": "Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?",
            "go": "package iterables\n\n// IsUnique with access to O(1) lookup data structures O(n)\nfunc IsUnique(s string) bool {\n\tm := map[rune]bool{}\n\tfor _, c := range s {\n\t\tif m[c] {\n\t\t\treturn false\n\t\t}\n\t\tm[c] = true\n\t}\n\treturn true\n}\n\n// IsUniqueSlow without access to any additional data structures O(n^2)\n// could sort in O(n log(n)), but the assumption is that a new string\n// constitutes an additional data structure\nfunc IsUniqueSlow(s string) bool {\n\tfor i, c := range s {\n\t\tfor j := i + 1; j < len(s); j++ {\n\t\t\tif c == rune(s[j]) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n",
            "number": "1",
            "python": "# with access to O(1) lookup data structures O(n)\ndef is_unique(s):\n    char_set = set()\n    for c in s:\n        if c in char_set:\n            return False\n        char_set.add(c)\n    return True\n\n\n# without access to any additional data structures O(n^2)\n# could sort in O(n log(n)), but the assumption is that a new string\n# constitutes an additional data structure\ndef is_unique_slow(s):\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True\n",
            "stem": "iterables-1",
            "title": "Is Unique",
            "ts": "// with access to O(1) lookup data structures O(n)\nfunction isUnique(s:string): boolean {\n  const charSet:Set<string> = new Set()\n  for (let c of s) {\n    if (charSet.has(c)) {\n      return false\n    }\n    charSet.add(c)\n  }\n  return true\n}\n\n// without access to any additional data structures O(n^2)\n// could sort in O(n log(n)), but the assumption is that a new string\n// constitutes an additional data structure\nfunction isUniqueSlow(s:string): boolean {\n  let i = 0\n  for (let c of s) {\n    for (let j = i + 1; j < s.length; j++) {\n      if (c === s[j]) {\n        return false\n      }\n    }\n    i++\n  }\n  return true\n}\n"
        },
        {
            "description": "Given two strings, write a method to decide if one is a permutation of the other.",
            "go": "package iterables\n\n// CheckPermutation runs in O(n + m)\nfunc CheckPermutation(s1, s2 string) bool {\n\tif len(s1) != len(s2) {\n\t\treturn false\n\t}\n\n\tcharCount := map[rune]int{}\n\n\tfor _, c := range s1 {\n\t\tif _, ok := charCount[c]; ok {\n\t\t\tcharCount[c]++\n\t\t} else {\n\t\t\tcharCount[c] = 1\n\t\t}\n\t}\n\n\tfor _, c := range s2 {\n\t\tif n, ok := charCount[c]; !ok || n == 0 {\n\t\t\treturn false\n\t\t}\n\t\tcharCount[c]--\n\t}\n\n\treturn true\n}\n",
            "number": "2",
            "python": "# O(n + m)\ndef check_permutation(s1, s2):\n    # need to be of equal length O(1)\n    if len(s1) != len(s2):\n        return False\n\n    # for O(1) lookup\n    char_count = {}\n\n    # O(n) where n is the length of s1\n    for c in s1:\n        if char_count.get(c):\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n\n    # O(m) where m is the length of s2\n    for c in s2:\n        # relies on 0 being falsy\n        if not char_count.get(c):\n            return False\n        char_count[c] -= 1\n\n    return True\n",
            "stem": "iterables-2",
            "title": "Check Permutation",
            "ts": "// O(n + m)\nfunction checkPermutation(s1: string, s2: string): boolean {\n  if (s1.length !== s2.length) {\n    return false\n  }\n\n  const charCount:{[key: string]: number} = {}\n\n  for (let c of s1) {\n    if (charCount[c]) {\n      charCount[c]++\n    } else {\n      charCount[c] = 1\n    }\n  }\n\n  for (let c of s2) {\n    if (!charCount[c]) {\n      return false\n    }\n    charCount[c]--\n  }\n\n  return true\n}\n"
        },
        {
            "description": "Write a method to replace all spaces in a string with '%20'.",
            "go": "package iterables\n\nimport \"strings\"\n\n// URLEncode replaces all spaces with %20\n//could rely on built in replace method, but that seems to be what the problem is asking us to implement\nfunc URLEncode(s string) string {\n\t// amortized cost to append to a slice in Go is O(1) even if O(n) in the worst case\n\tss := []string{}\n\n\t// O(n) where n is the length of the string\n\tfor _, c := range s {\n\t\tif c == ' ' {\n\t\t\tss = append(ss, \"%20\")\n\t\t} else {\n\t\t\t// complexity to cast is O(m) where m is the number of bytes\n\t\t\t// for each rune comprising the string this is effectively O(1)\n\t\t\tss = append(ss, string(c))\n\t\t}\n\t}\n\n\t// strings.Join is O(n)\n\treturn strings.Join(ss, \"\")\n}\n",
            "number": "3",
            "python": "# O(n)\n# could rely on built in replace method, but that seems to be what the problem is asking us to implement\ndef url_encode(s):\n    # strings are immutable so building a list and using ''.join()\n    # is a better approach than building a new string with +=\n\n    # O(n) for the list comprehension and O(n) for join()\n    return ''.join(['%20' if c == ' ' else c for c in s])\n",
            "stem": "iterables-3",
            "title": "URL Encode",
            "ts": "// O(n)\n// could rely on built in replace method, but that seems to be what the problem is asking us to implement\nfunction URLEncode(s:string):string {\n  const charArray:string[] = []\n  for (let c of s) {\n    if (c === ' ') {\n      charArray.push('%20')\n    } else {\n      charArray.push(c)\n    }\n  }\n  return charArray.join('')\n}\n"
        },
        {
            "description": "Given a string, write a method to check if it is a permutation of a palindrome.",
            "go": "package iterables\n\n// PalindromePermutation runs in O(n)\nfunc PalindromePermutation(s string) bool {\n\tm := map[rune]int{}\n\n\tfor _, c := range s {\n\t\t// in Go, there is an implied zero value based on type\n\t\t// therefore, you don't need the existence check common in\n\t\t// in other languages before incrementing the count\n\t\tm[c]++\n\t}\n\n\thasOdd := false\n\n\tfor k := range m {\n\t\tif m[k]%2 == 1 {\n\t\t\tif hasOdd {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\thasOdd = true\n\t\t}\n\t}\n\n\treturn true\n}\n",
            "number": "4",
            "python": "# O(n)\ndef palindrome_permutation(s):\n    character_count = {}\n\n    # O(n)\n    for c in s:\n        if character_count.get(c):\n            character_count[c] += 1\n        else:\n            character_count[c] = 1\n\n    # a string is a palindrome if all character counts are even\n    # if any are odd counts, there can be only one serving as the middle character\n\n    has_odd = False\n\n    # number of unique characters is always <= number of characters still O(n)\n    for v in character_count.values():\n        if v % 2 == 1:\n            if has_odd:\n                # more than one odd\n                return False\n            has_odd = True\n\n    return True\n",
            "stem": "iterables-4",
            "title": "Palindrome Permutation",
            "ts": "// O(n)\nfunction palindromePermutation(s:string):boolean {\n  const charCount:{[key:string]:number} = {}\n  for (let c of s) {\n    if (charCount[c]) {\n      charCount[c]++\n    } else {\n      charCount[c] = 1\n    }\n  }\n\n  let hasOdd = false\n\n  // Object.values requires a later TS transpilation target than ES6\n  for (let char in charCount) {\n    if (charCount[char] % 2 === 1) {\n      if (hasOdd) {\n        return false\n      }\n      hasOdd = true\n    }\n  }\n     \n  return true\n}\n"
        },
        {
            "description": "Write a method to determine if two strings are one edit removed from each other. An edit constitutes replacing, removing or adding a single character.",
            "go": "package iterables\n\n// O(n)\nfunc hasAdditionalCharacter(s1, s2 string) bool {\n\thasSkipped := false\n\ti := 0\n\tj := 0\n\n\tfor i < len(s1) {\n\t\tif s1[i] == s2[j] {\n\t\t\ti++\n\t\t\tj++\n\t\t} else if !hasSkipped {\n\t\t\thasSkipped = true\n\t\t\tj++\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n// OneAway runs in O(n)\nfunc OneAway(s1, s2 string) bool {\n\tif len(s2)-len(s1) == 1 {\n\t\treturn hasAdditionalCharacter(s1, s2)\n\t} else if len(s1)-len(s2) == 1 {\n\t\treturn hasAdditionalCharacter(s2, s1)\n\t} else if len(s1) == len(s2) {\n\t\tseenReplacement := false\n\t\tfor i, c := range s1 {\n\t\t\tif c != rune(s2[i]) {\n\t\t\t\tif seenReplacement {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tseenReplacement = true\n\t\t\t}\n\t\t}\n\t\treturn seenReplacement\n\t}\n\treturn false\n}\n",
            "number": "5",
            "python": "# O(n) determines if s2 is s1 with an additional character\ndef has_additional_character(s1, s2):\n    # can skip a single additional character in s2 to create s1\n    has_skipped = False\n    i = 0\n    j = 0\n\n    while i < len(s1):\n        if s1[i] == s2[j]:\n            i += 1\n            j += 1\n        elif not has_skipped:\n            has_skipped = True\n            j += 1\n        else:\n            return False\n\n    return True\n\n\n# O(n)\ndef one_away(s1, s2):\n    # O(n) add case\n    if len(s2) - len(s1) == 1:\n        return has_additional_character(s1, s2)\n\n    # O(n) remove case\n    elif len(s1) - len(s2) == 1:\n        return has_additional_character(s2, s1)\n\n    # O(n) handle replace\n    elif len(s1) == len(s2):\n        # can have at most one replacement\n        seen_replacement = False\n\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                if seen_replacement:\n                    return False\n                seen_replacement = True\n\n        # will be False if strings are identical\n        return seen_replacement\n\n    # if string lengths differ by more than 1\n    return False\n",
            "stem": "iterables-5",
            "title": "One Away",
            "ts": "// O(n)\nfunction hasAdditionalCharacter(s1: string, s2: string):boolean {\n  let hasSkipped = false\n\tlet i = 0\n\tlet j = 0\n\n\twhile (i < s1.length) {\n\t\tif (s1[i] == s2[j]) {\n\t\t\ti++\n\t\t\tj++\n\t\t} else if (!hasSkipped) {\n\t\t\thasSkipped = true\n\t\t\tj++\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n  return true\n}\n\n// O(n)\nfunction oneAway(s1: string, s2: string):boolean {\n  if (s2.length - s1.length === 1) {\n    return hasAdditionalCharacter(s1, s2)\n  } else if (s1.length - s2.length === 1) {\n    return hasAdditionalCharacter(s2, s1)\n  } else if (s1.length === s2.length) {\n    let seenReplacement = false\n    for (let i = 0; i < s1.length; i++) {\n      if (s1[i] !== s2[i]) {\n        if (seenReplacement) {\n          return false\n        }\n        seenReplacement = true\n      }\n    }\n    return seenReplacement\n  }\n  return false\n}\n"
        }
    ]
}